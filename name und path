/*
 * myfind.c
 *
 *    Programmname: myfind
 *    Aufgabenstellung: Funktionsprogrammierung des "find" Befehl
 *  Created on: Mar 19, 2020 00:15
 *      Author: Mahir Tulic   | 1910258009(ic19b009)
 *              David Rüb     | 1910258081(ic19b081)
 *              Manuel Houzar | 1910258089(ic19b089)
 *              Ibrahim Alnaif| 1910258033(ic19b033)
*/


#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <dirent.h>
#include <error.h>
#include <sys/stat.h>
#include <fnmatch.h>
#include <grp.h>
#include <pwd.h>
#include <time.h>
#include <unistd.h>
#include <ctype.h>


#define MAXLEN 256
#define NULLCHAR 1


//ls:

static void print_permission_string(struct stat *buf);

//-----------------------------



static void no_argv(int argc, char ** parms);
//do_entry(const char * entry_name, const char * const * parms);

static void do_entry(const char * entry_name, char ** parms);
static void do_dir(const char * dir_name, char ** parms,int ls_mode);
static int do_name(const char * entry_name, char *parms);
static int do_type(const char *parms, const struct stat *entry_data);
static int do_path(const char * entry_name, char *parms);
static void do_print(const char *file_name,const int print_that);
static void do_ls(const char *path,struct stat *buf,const int print_that);

int do_user(struct stat entry_data, const char * parms);
int do_username(struct stat entry_data, const char * parms);
int do_userid(struct stat entry_data, const char * parms);
int do_nouser(struct stat entry_data);
int do_group(struct stat entry_data, const char * parms);
int do_groupname(struct stat entry_data, const char * parms);
int do_groupid(struct stat entry_data, const char * parms);
int do_nogroup(struct stat entry_data);


int main (int argc, char* argv[])
{
    //char* dirname
    no_argv(argc,argv);
// int argvlength = 0;
//   char* dirname = NULL;
//   dirname = argv[1];
    //dirname = ".";
  //  if (argv[1] != NULL) argvlength=strlen(argv[1]);
    //fprintf(stderr, "Test Länge: %d\n%c\n",argvlength,argv[1]);
    do_entry(argv[1],argv);
    //do_dir(dirname,argv);

    return 0;
}

static void no_argv(int argc, char ** parms){
    if (argc == 1) {
         printf ("Default directory\n");
    parms[1]=".";
    parms[2]=NULL;}

    else if(argc >= 2 ){
        if (*parms[1] == '-'){
            char *temp;
            int n= argc+2;
                printf ("Default directory\n");
//		... %s sollte gegeben sein", parms[1]);
                 for (int i= n-2;i>=1; i--){
                     temp = parms[i];
                     parms[i+1]=temp;
                 }

                 parms[1]=".";
                 parms[n]=NULL;}}
  /*  printf("\n arguments are:");
    for (int i=argc ; i>0; i--){
    printf("\n argv[%d]: %s \n",i,parms[i]);
    }*/

}


void do_dir(const char * dir_name, char ** parms, int ls_mode) {
	//printf("TestTestTestMahir");
    struct stat st;
    const struct dirent *dirent;
    char wholepath[sizeof(dir_name)+sizeof(dirent->d_name)+1];
    errno=0;
    DIR *dirp;
    dirp = opendir(dir_name);
    //int is_dir_flag=0;
  //  char temp_dir[MAXLEN];
    if (errno != 0){
    //if ((dirp = opendir(dir_name)) == NULL) {

        error(1,errno, "Fehler!: %s\n",dir_name);
        return;
        //EXIT_FAILURE;

    }
    else {
        //printf("wir haben %s gefunden \n",dir_name);
        errno = 0;
        while ((dirent = readdir(dirp)) != NULL) {

            //printf("%d\n", testnr);
            if (strcmp(dirent->d_name, ".") != 0 && (strcmp(dirent->d_name, "..") != 0)) {
           if(ls_mode==0){
		   //printf("%s/%s\n", dir_name, dirent->d_name);
			snprintf(wholepath, (sizeof(dir_name)+sizeof(dirent->d_name) +NULLCHAR), "%s/%s", dir_name, dirent->d_name);
		   }

		   strcpy(wholepath,dir_name);
		   strcat(wholepath, "/");
		   strcat(wholepath, dirent->d_name);


			   if (lstat(wholepath, &st) == -1) {
                    error(0,errno, "stat - no such file or directory");
                    exit(1);
                }


do_entry(wholepath, parms);

            }


			/*
            if (S_ISDIR(st.st_mode)) {
                do_dir(wholepath,parms);
            }
			*/
    errno=0;
    }
        if (errno!=0){
            error(0,errno, "Fault while readdir");
        }
        if (closedir(dirp) == -1) {
            error(0,errno, "closedir");
            exit(1);
        }
    }
}


void do_entry(const char * entry_name, char ** parms){
    struct stat entry_data;
	//printf("\nHabe Entry-Funktion aufgerufen");
    // get information about the file and/or directory
    if (lstat(entry_name, &entry_data) == -1)
    {
       //  error(0,errno,"lstat failed");
        return;
    }
    errno=0;
    int i=0;
    int ls_mode=0;
	int default_print = 1;
	int print_this=1;
    
    char buffer[MAXLEN];
    const char possible_entry[10][MAXLEN] = {"-nogroup","-group", "-nouser", "-user", "-name", "-type", "-path", "-print", "-ls"};

    while (parms[++i] != NULL){
        if (*parms[i] == '-'){
            strcpy(buffer, parms[i]);
            for (int j = 0; j < 10; j++) {

                if ((strcmp(possible_entry[j], buffer)) == 0) {
                  //  printf("Gefunden:%s!!\n", possible_entry[j]); //
                	if((strcmp(possible_entry[7], buffer)) == 0){
                		default_print = 0;
                	}
                    switch (j)
                {
                case 0:
                  print_this=do_nogroup(entry_data);
                    break;
                case 1:
                   print_this=do_group(entry_data,parms[i+1]);
                    break;
                case 2:
                   print_this=do_nouser(entry_data);
                    break;
                case 3:
                    print_this=do_user(entry_data,parms[i+1]);
                    break;
                case 4:
                    print_this=do_name(entry_name,parms[i + 1]);
                    break;
                case 5:
                	print_this=do_type(parms[i+1],&entry_data);
                	break;
                case 6:
                    print_this=do_path(entry_name,parms[i + 1]);
                    break;
                case 7:
                	do_print(entry_name,print_this);
                    break;
                case 8:
                    //do_ls(parms[i-1]);
                    default_print = 0;
                    do_ls(entry_name,&entry_data,print_this);
                    
                    break;


                default:
                    error(0,errno, "switch-case-default");
                exit(1);
                    break;

                /*    if (j == 0) {
                    do_nogroup(parms[i + 1]);
                    } else if (j == 1) {
                        do_group(parms[i + 1]);
                    } else if (j == 2) {
                        do_nouser(parms[i + 1]);
                    } else if (j == 3) {
                        do_user(parms[i + 1]);
                    } else if (j == 4) {
                        do_dir_flag=0;
                        printf("TTUTUUTU");
                        do_name(entry_name,parms[i + 1]);
                    } else if (j == 6) {
                        do_path(parms[i+1]);
                    } else if (j == 7) {
                    do_print(parms[i]);
                    } else if (j == 8) {
                    do_ls(parms[i]);
                    }
                }
                else{  */
				//	if (S_ISDIR(entry_data.st_mode)){
                    //if (do_dir_flag==1){

                   // }
                }
             }

        }

    }


    }
	//printf("\n nr:%i parameter:%s\n",i,parms[i]);
    if (default_print == 1){
        do_print(entry_name,print_this);
        
    }
    if (S_ISDIR(entry_data.st_mode)){
        do_dir(entry_name,parms,ls_mode);
    }
}

    static void do_group(char *parms){
        printf("Group: Gesucht wird nach: %s", parms);
    }
    static void do_nogroup(char *parms) {
        printf("NoGroup:Gesucht wird nach: %s", parms);
    }
    static void do_nouser(char *parms) {
        printf("do_nouser Gesucht wird nach: %s", parms);
    }
    static void do_user(char *parms) {
        printf(" do_user Gesucht wird nach: %s", parms);
    }
   
static int do_name(const char *entry_name, char *parms) {
const char *buff = NULL;
if(strrchr(entry_name, '/') != 0){
    buff = (strrchr(entry_name, '/') + 1);

    if (fnmatch(buff, parms, FNM_NOESCAPE) == 0){ 
        return 1;
    }
    else{
        return 0;
    }
}
else{
    if (fnmatch(entry_name, parms, FNM_NOESCAPE) == 0){ 
       return 1;
    }
    else{
        return 0;
    }
}
}
    static int do_type(const char *parms, const struct stat *entry_data) {

    /*    int type_scan;
        char buffer[MAXLEN];
    	const char possible_entry[8][MAXLEN] = {"d","c", "b", "p", "l", "s", "f"};
    	for(int i=0;i<7;i++){
            if ((strcmp(possible_entry[i], buffer)) == 0) {
    			type_scan =i;
    		}
    	}
      	printf("%d",type_scan);
*/

    	char type_scan = parms[0];
      	    switch (type_scan) {
      	        case 'd':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFDIR) {
      	                return 1;
      	            }
      	            break;
      	        case 'c':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFCHR) {
      	                return 1;
      	            }
      	            break;
      	        case 'b':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFBLK) {
      	                return 1;
      	            }
      	            break;
      	        case 'p':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFIFO) {
      	                return 1;
      	            }
      	            break;
      	        case 'l':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFLNK) {
      	                return 1;
      	            }
      	            break;
      	        case 's':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFSOCK) {
      	                return 1;
      	            }
      	            break;
      	        case 'f':
      	            if ((entry_data->st_mode & S_IFMT) == S_IFREG) {
      	                return 1;
      	            }
      	            break;
      	        default:
      	          error(EXIT_FAILURE, errno, "Unknown type -type: %s\n", parms);
      }

      	    return 0;

      	 }
static void do_print(const char *file_name,const int print_that) {

    errno = 0;
    if (print_that==1){
        int print_control = printf("%s\n", file_name);
        if (print_control < 0) {
            error(0, errno, "\nError while printing\n");
        }
    }
}
static int do_path(const char *entry_name, char *parms) {
    const char *buff = NULL;
    if(strrchr(entry_name, '/') != 0){
        buff = (strrchr(entry_name, '/') + 1);

        if (fnmatch(buff, parms, FNM_NOESCAPE) == 0){ 
            return 1;
        }
        else{
            return 0;
        }
    }
    else{
        if (fnmatch(entry_name, parms, FNM_NOESCAPE) == 0){ 
        return 1;
        }
        else{
            return 0;
        }
    }
}
 //   static void do_ls(char *parms) {
      //  printf("ls Gesucht wird nach: %s", parms);
  //  }



static void do_ls(const char *path, struct stat *buf,const int print_that) {

    struct passwd *pwd;
    struct group *grp;
    if(print_that==1){
        pwd = getpwuid(buf->st_uid);
        grp = getgrgid(buf->st_gid);
        struct tm * time;
        time = localtime (&(buf->st_mtime));
        char buff [30];
        strftime(buff, sizeof(buff), "%b %d %H:%M", time);
        printf("    %5lu  %5lu ",buf->st_ino,buf->st_blocks/2); ////BLOCKSIZE*st_blocks / st_size ->umsetzen nur wie?
        print_permission_string(buf);
        //buf->st_mode,
        printf(" %3ld %2s %10s %10ld %s %s ",
        buf->st_nlink,
        pwd->pw_name,
        grp->gr_name,
        buf->st_size,
        buff,
        path);
        printf("\n");

    }
}

	static /*char**/void print_permission_string(struct stat *buf){
		struct stat fileStat = *buf;
		char type;
		int number;
		number=fileStat.st_mode& S_IFMT;
		switch(number)
		{
			case S_IFSOCK: type = 's'; break;
			case S_IFLNK: type = 'l'; break;
			case S_IFREG: type = '-'; break;
			case S_IFBLK: type = 'b'; break;
			case S_IFDIR: type = 'd'; break;
			case S_IFCHR: type = 'c'; break;
			case S_IFIFO: type= 'p'; break;
			default: type = '-'; 
		}
			
		printf( "%c",type);
        printf( (fileStat.st_mode & S_IRUSR) ? "r" : "-");
		printf( (fileStat.st_mode & S_IWUSR) ? "w" : "-");
		printf( (fileStat.st_mode & S_IXUSR) ? "x" : "-");
		printf( (fileStat.st_mode & S_IRGRP) ? "r" : "-");
		printf( (fileStat.st_mode & S_IWGRP) ? "w" : "-");
		printf( (fileStat.st_mode & S_IXGRP) ? "x" : "-");
		printf( (fileStat.st_mode & S_IROTH) ? "r" : "-");
		printf( (fileStat.st_mode & S_IWOTH) ? "w" : "-");
		printf( (fileStat.st_mode & S_IXOTH) ? "x" : "-");

	}

int do_user(struct stat data_entry, const char * parms)
{
    int match;
    if(do_username(data_entry, parms) || do_userid(data_entry, parms) == 1){

        match = 1;
    } else {

        match = 0;
    }
    return match;
}




int do_username(struct stat entry_data, const char * parms)
{
    int match;
    struct passwd *pwd_entry;
    errno = 0;
    pwd_entry = getpwnam(parms);
    if (pwd_entry != NULL)
    {
        if((entry_data.st_uid == pwd_entry->pw_uid)==1){

            match = 1;
        }else{

            match = 0;
        }
    }
    else
    {
        match = 0;
        if (errno != 0)
            error(0, errno, "\nError - user\n");
    }
    return match;
}




int do_userid(struct stat entry_data, const char * parms)
{
    int match;
    uid_t uid;

    uid = (uid_t)strtol(parms,NULL,0);

    if((entry_data.st_uid == uid)== 1 ){

        match = 1;
    }else{

        match = 0;
    }

    return match;
}




int do_nouser(struct stat entry_data)
{
    int result;
    struct passwd *pwd_entry;
    errno = 0;
    pwd_entry = getpwuid(entry_data.st_uid);
    result = (pwd_entry == NULL);
    if (errno !=0) {
        error(0, errno, "\nError - nouser\n");
    }
    return result;
}




int do_group(struct stat entry_data, const char * parms)
{
    int result;
   if(do_groupname(entry_data, parms) || do_groupid(entry_data, parms)== 1 ){

       result = 1;

   } else {

       result = 0;
   }
    return result;
}




int do_groupname(struct stat entry_data, const char * parms)
{
    int match;
    struct group *gr_entry;
    errno = 0;
    gr_entry = getgrnam(parms);
    if (gr_entry != NULL)
    {
        match = (entry_data.st_gid == gr_entry->gr_gid);
    }
    else
    {
        match = 0;
        if (errno != 0) {
            error(0, errno, "\nError - group\n");
        }
    }
    return match;
}



int do_groupid(struct stat entry_data, const char * parms)
{
    int match;

    gid_t gid;

    gid = (gid_t)strtol(parms,NULL,0);

    if((entry_data.st_gid == gid)==1){

        match = 1;
    }else {

        match = 0;
    }
    return match;
}


int do_nogroup(struct stat entry_data){
    {
        int match;
        errno = 0;

        struct group *gr_entry;

       gr_entry = getgrgid(entry_data.st_gid);

        match = (gr_entry == NULL);

        if (errno != 0){
            error(0, errno, "\nError - nogroup\n");
        }

        return match;
    }

}
